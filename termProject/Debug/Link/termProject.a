;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include "lcd.h"

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	ch -> R17
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;	ch -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;	c -> R17
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;	*str -> R16,R17
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;	col -> R16
;	row -> R17
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;#define D_A 6
;#define D_B 11
;#define D_C 30		// 신뢰할 수 있는 최대치
;#define D_D 70
;#define DELTA 1
;#define MOTOR_FAST 235
;#define MOTOR_SLOW 210
;
;#define TURN_TIME 30000
;#define MID_ANGLE 4000
;
;#define ARR_SIZE 5
;# define SWAP(x, y, temp) ( (temp)=(x), (x)=(y), (y)=(temp) )
;
;unsigned long int TCsec;
;unsigned long int TCstart;
;
;unsigned char mode;
;unsigned char nowStat;
;
;/* 서보 */
;void Init_Timer3A()
; 0000 001C {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 001D 	TCCR3A = 0xAA; // FAST PWM
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 001E 	TCCR3B = 0x1A; // 8분주=0.5usec
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 001F 
; 0000 0020 	OCR3AH = MID_ANGLE >> 8;          // 1500usec=0도
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0021 	OCR3AL = MID_ANGLE & 0xff;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0022 	DDRE = 0x08;               // DDRE=0x08;   // PE 3 out
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0023 	ICR3H = 39999 >> 8;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0024 	ICR3L = 39999 & 0xff;        // 0.5usec*40000=20000usec=50Hz
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0025 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;
;void Servo_motor(int angle)
; 0000 0028 {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0029 	OCR3AH = (angle * 14 + MID_ANGLE) >> 8;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;	angle -> R16,R17
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 002A 	OCR3AL = (angle * 14 + MID_ANGLE) & 0xFF;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 002B }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;
;/* 초음파 센서 */
;#define Trigger1     PORTB.0 //초음파 트리거
;#define Trigger2     PORTB.0
;#define Trigger3     PORTB.0
;
;#define Echo1        PIND.0 //초음파 에코
;#define Echo2        PIND.1
;#define Echo3        PIND.2
;
;unsigned int leftArr[ARR_SIZE];         // 왼쪽
;unsigned int rightArr[ARR_SIZE];        // 정면
;unsigned int frontArr[ARR_SIZE];        // 오른쪽
;unsigned int leftD;         // 왼쪽
;unsigned int rightD;        // 정면
;unsigned int frontD;        // 오른쪽
;unsigned int leftPastD;         // 왼쪽
;unsigned int frontPastD;        // 정면
;unsigned int rightPastD;        // 오른쪽
;
;unsigned char L_R;
;
;// unsigned int sonar_arr[3];
;
;unsigned char rangeStr[5];
;unsigned char TCsecStr[10];
;
;void getEchoFront(unsigned char i) {
; 0000 0047 void getEchoFront(unsigned char i) {
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0048     while (!Echo1);//high가 될때
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;	i -> R17
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0049     TCNT1 = 0; TCCR1B = 2; //카운터시작 , 0.5분주
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 004A     while (Echo1);//low가 될때
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 004B     TCCR1B = 8; //카운터 정지 TCCR1B = 0도 가능
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 004C     rightArr[i] = TCNT1 / 116;//CM변경
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 004D     TCNT1 = 0;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 004E }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;void getEchoRight(unsigned char i)
; 0000 0050 {
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0051     while (!Echo2);//high가 될때
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;	i -> R17
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0052     TCNT1 = 0; TCCR1B = 2; //카운터시작 , 0.5분주
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0053     while (Echo2);//low가 될때
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0054     TCCR1B = 8; //카운터 정지 TCCR1B = 0도 가능
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0055     frontArr[i] = TCNT1 / 116;//CM변경
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0056     TCNT1 = 0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0057 }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;void getEchoLeft(unsigned char i) {
; 0000 0058 void getEchoLeft(unsigned char i) {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0059     while (!Echo3);//high가 될때
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;	i -> R17
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 005A     TCNT1 = 0; TCCR1B = 2; //카운터시작 , 0.5분주
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 005B     while (Echo3);//low가 될때
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 005C     TCCR1B = 8; //카운터 정지 TCCR1B = 0도 가능
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 005D     leftArr[i] = TCNT1 / 116;//CM변경
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 005E     TCNT1 = 0;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 005F }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;/* 초음파 센서 */
;
;/* 서보 */
;
;void custom_port_init() {
; 0000 0064 void custom_port_init() {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0065     DDRE = 0xff;        // Servo, DC
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0066     DDRB = 0xff;        // Sonar, DC
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0067     DDRD = 0x00;        // DC
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0068 
; 0000 0069     //DDRF = 0xFF;
; 0000 006A }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;
;/* DC MOTOR */
;void TIMSK_setting() {
; 0000 006D void TIMSK_setting() {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 006E     TIMSK = (1 << OCIE0) | (1 << TOIE0);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 006F }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;void timer0_Init() {
; 0000 0070 void timer0_Init() {
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0071     TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << CS01);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0072 }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;interrupt[TIM0_COMP] void timer0_compare() {
; 0000 0073 interrupt[16] void timer0_compare() {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0074     PORTB.5 = 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0075     PORTB.6 = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0076 }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;interrupt[TIM0_OVF] void timer0_overflow() {
; 0000 0077 interrupt[17] void timer0_overflow() {
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0078     PORTB.5 = 1;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0079     PORTB.6 = 1;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 007A 
; 0000 007B     TCsec++;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 007C }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;
;void Motor_fast() {
; 0000 007E void Motor_fast() {
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 007F     OCR0 = MOTOR_FAST;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0080 }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;void Motor_slow() {
; 0000 0081 void Motor_slow() {
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0082     OCR0 = MOTOR_SLOW;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0083 }
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;void DC_front() {
; 0000 0084 void DC_front() {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0085     PORTE.4 = 1;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0086     PORTE.5 = 0;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0087     PORTE.6 = 1;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0088     PORTE.7 = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0089 }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;void DC_back() {
; 0000 008A void DC_back() {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 008B     PORTE.4 = 0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 008C     PORTE.5 = 1;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 008D     PORTE.6 = 0;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 008E     PORTE.7 = 1;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 008F }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;
;void DC_stop() {
; 0000 0091 void DC_stop() {
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0092     PORTB.5 = 0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0093     PORTB.6 = 0;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0094     TIMSK = (0 << OCIE0) & (0 << TOIE0);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0095 }
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;
;void DC_start() {
; 0000 0097 void DC_start() {
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0098     TIMSK = (1 << OCIE0) | (1 << TOIE0);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0099     PORTB.5 = 1;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 009A     PORTB.6 = 1;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 009B }
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;
;void DC_Left() {
; 0000 009D void DC_Left() {
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 009E     PORTE.4 = 0;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 009F     PORTE.5 = 1;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00A0     PORTE.6 = 1;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00A1     PORTE.7 = 0;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00A2 }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;
;void DC_Right() {
; 0000 00A4 void DC_Right() {
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00A5     PORTE.4 = 1;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00A6     PORTE.5 = 0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00A7     PORTE.6 = 0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00A8     PORTE.7 = 1;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00A9 }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;
;/* DC MOTOR */
;
;int partition(unsigned int list[], int left, int right) {
; 0000 00AD int partition(unsigned int list[], int left, int right) {
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00AE     int pivot, temp;
; 0000 00AF     int low, high;
; 0000 00B0 
; 0000 00B1     low = left;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;	list -> Y+12
;	left -> Y+10
;	right -> Y+8
;	pivot -> R16,R17
;	temp -> R18,R19
;	low -> R20,R21
;	high -> Y+6
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00B2     high = right + 1;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00B3     pivot = list[left];
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00B4 
; 0000 00B5     do {
;PCODE: $000001C5 VOL: 0
; 0000 00B6         do {
;PCODE: $000001C6 VOL: 0
; 0000 00B7             low++;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00B8         } while (low <= right && list[low] < pivot);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00B9 
; 0000 00BA         do {
;PCODE: $000001DA VOL: 0
; 0000 00BB             high--;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00BC         } while (high >= left && list[high] > pivot);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00BD 
; 0000 00BE         if (low < high) {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00BF             SWAP(list[low], list[high], temp);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 00C0         }
; 0000 00C1     } while (low < high);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00C2 
; 0000 00C3     SWAP(list[left], list[high], temp);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00C4 
; 0000 00C5     return high;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00C6 }
;PCODE: $0000022A VOL: 0
;
;void quick_sort(unsigned int list[], int left, int right) {
; 0000 00C8 void quick_sort(unsigned int list[], int left, int right) {
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00C9     if (left < right) {
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;	list -> R20,R21
;	left -> R18,R19
;	right -> R16,R17
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 00CA         int q = partition(list, left, right);
; 0000 00CB 
; 0000 00CC         quick_sort(list, left, q - 1);
;PCODE: $00000236 VOL: 0
;	q -> Y+0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 00CD         quick_sort(list, q + 1, right);
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 00CE     }
;PCODE: $00000247 VOL: 0
; 0000 00CF }
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;
;unsigned int get_median_L(unsigned char num) {
; 0000 00D1 unsigned int get_median_L(unsigned char num) {
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 00D2     quick_sort(leftArr, 0, ARR_SIZE - 1);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;	num -> R17
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 00D3     return leftArr[num];
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 00D4 }
;PCODE: $00000260 VOL: 0
;
;unsigned int get_median_F(unsigned char num) {
; 0000 00D6 unsigned int get_median_F(unsigned char num) {
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 00D7     quick_sort(frontArr, 0, ARR_SIZE - 1);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;	num -> R17
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 00D8     return frontArr[num];
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 00D9 }
;PCODE: $00000274 VOL: 0
;
;unsigned int get_median_R(unsigned char num) {
; 0000 00DB unsigned int get_median_R(unsigned char num) {
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 00DC     quick_sort(rightArr, 0, ARR_SIZE - 1);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;	num -> R17
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 00DD     return rightArr[num];
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 00DE }
;PCODE: $00000288 VOL: 0
;
;void get_sonar() {
; 0000 00E0 void get_sonar() {
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 00E1     unsigned char i = 0;
; 0000 00E2     for (i = 0; i < ARR_SIZE; i++) {
;PCODE: $0000028B VOL: 0
;	i -> R17
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 00E3         Trigger3 = 1; delay_us(10); Trigger3 = 0; getEchoRight(i); delay_ms(10);
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 00E4         Trigger2 = 1; delay_us(10); Trigger2 = 0; getEchoFront(i); delay_ms(10);
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 00E5         Trigger1 = 1; delay_us(10); Trigger1 = 0; getEchoLeft(i); delay_ms(10);
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 00E6     }
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 00E7 
; 0000 00E8     leftD = get_median_L(2);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 00E9     frontD = get_median_F(2);
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 00EA     rightD = get_median_R(1);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 00EB 
; 0000 00EC     LCD_pos(0, 1);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 00ED     sprintf(rangeStr, "%03d", rightD);
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 00EE     LCD_STR(rangeStr);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 00EF 
; 0000 00F0     LCD_pos(0, 5);
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 00F1     sprintf(rangeStr, "%03d", frontD);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 00F2     LCD_STR(rangeStr);
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 00F3 
; 0000 00F4     LCD_pos(0, 9);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 00F5     sprintf(rangeStr, "%03d", leftD);
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 00F6     LCD_STR(rangeStr);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 00F7 
; 0000 00F8     LCD_pos(0, 14);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 00F9     switch (mode)
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 00FA     {
; 0000 00FB     case 0:
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 00FC         LCD_CHAR('A');
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 00FD         break;
;PCODE: $00000303 VOL: 0
; 0000 00FE     case 1:
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 00FF         LCD_CHAR('B');
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0100         break;
;PCODE: $00000309 VOL: 0
; 0000 0101     case 2:
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0102         LCD_CHAR('C');
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0103         break;
;PCODE: $0000030F VOL: 0
; 0000 0104     case 3:
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0105         LCD_CHAR('D');
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0106         break;
;PCODE: $00000315 VOL: 0
; 0000 0107     case 4:
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0108         LCD_CHAR('E');
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0109         break;
;PCODE: $0000031B VOL: 0
; 0000 010A     default:
;PCODE: $0000031C VOL: 0
; 0000 010B         LCD_CHAR('Z');
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 010C         break;
;PCODE: $0000031F VOL: 0
; 0000 010D     }
;PCODE: $00000320 VOL: 0
; 0000 010E     LCD_pos(0, 15);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 010F     LCD_CHAR(nowStat);
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 0110 
; 0000 0111     LCD_pos(1, 0);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0112     sprintf(TCsecStr, "%4x%4x", TCsec >> 16, TCsec);
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0113     LCD_STR(TCsecStr);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0114 }
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;
;void main() {
; 0000 0116 void main() {
;PCODE: $0000033E VOL: 0
; 0000 0117     SREG |= 0x80;
;PCODE: $0000033F VOL: 0
; 0000 0118     custom_port_init();
;PCODE: $00000340 VOL: 0
; 0000 0119     Init_Timer3A();
;PCODE: $00000341 VOL: 0
; 0000 011A     Port_Init();
;PCODE: $00000342 VOL: 0
; 0000 011B     LCD_Init();
;PCODE: $00000343 VOL: 0
; 0000 011C     TIMSK_setting();
;PCODE: $00000344 VOL: 0
; 0000 011D     timer0_Init();
;PCODE: $00000345 VOL: 0
; 0000 011E 
; 0000 011F     TCCR1A = 0;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0120     TCCR1B = 8;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0121     Motor_fast();
;PCODE: $0000034A VOL: 0
; 0000 0122 
; 0000 0123     leftD = 0;
;PCODE: $0000034B VOL: 0
; 0000 0124     frontD = 0;
;PCODE: $0000034C VOL: 0
; 0000 0125     rightD = 0;
;PCODE: $0000034D VOL: 0
; 0000 0126     leftPastD = 0;
;PCODE: $0000034E VOL: 0
; 0000 0127     frontPastD = 0;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 0128     rightPastD = 0;
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 0129 
; 0000 012A     TCsec = 0;
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 012B     TCstart = 0;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 012C 
; 0000 012D     PORTE.3 = 0;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 012E 
; 0000 012F     /* DC Default */
; 0000 0130     PORTB.5 = 1;
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 0131     PORTB.6 = 1;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0132 
; 0000 0133     OCR0 = MOTOR_FAST;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0134 
; 0000 0135     DC_front();
;PCODE: $0000035F VOL: 0
; 0000 0136     /* DC Default */
; 0000 0137 
; 0000 0138     L_R = 2;    //작은 값 L(0), R(1)
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 0139     mode = 0;
;PCODE: $00000362 VOL: 0
; 0000 013A     nowStat = 0;
;PCODE: $00000363 VOL: 0
; 0000 013B 
; 0000 013C     while (1) {
;PCODE: $00000364 VOL: 0
; 0000 013D         L_R = 0;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 013E         leftPastD = leftD;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 013F         frontPastD = frontD;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 0140         rightPastD = rightD;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 0141 
; 0000 0142         get_sonar();
;PCODE: $0000036D VOL: 0
; 0000 0143         if (leftD > rightD) L_R = 1;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0144 
; 0000 0145         if (!mode) TCstart = 0;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0146         else if (TCstart == 0) TCstart = TCsec;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 0147 
; 0000 0148         if (TCsec > 650000) mode = 2;
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0149 
; 0000 014A         if (mode == 2) {
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 014B             nowStat = '2';
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 014C             DC_front();
;PCODE: $0000038C VOL: 0
; 0000 014D             Servo_motor(25);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 014E             delay_ms(200);
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 014F             Servo_motor(-25);
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0150             delay_ms(200);
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0151             Servo_motor(25);
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 0152             delay_ms(200);
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 0153             Servo_motor(-25);
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 0154             delay_ms(200);
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 0155             Servo_motor(25);
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 0156             delay_ms(200);
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0157             Servo_motor(-25);
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 0158             delay_ms(200);
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0159             DC_stop();
;PCODE: $000003AE VOL: 0
; 0000 015A             LCD_Clear();
;PCODE: $000003AF VOL: 0
; 0000 015B             sprintf(TCsecStr, "End Drive");
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 015C             LCD_STR(TCsecStr);
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 015D             delay_ms(50000);
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 015E         }
; 0000 015F         else if (frontD < D_A && frontPastD < D_B) {
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 0160             nowStat = 'B';
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0161             DC_back();
;PCODE: $000003CB VOL: 0
; 0000 0162             Motor_slow();
;PCODE: $000003CC VOL: 0
; 0000 0163 
; 0000 0164             if (leftPastD > rightPastD) {
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0165                 Servo_motor(20);
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0166                 delay_ms(400);
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0167                 Servo_motor(0);
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 0168             }
; 0000 0169             else {
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 016A                 Servo_motor(-20);
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 016B                 delay_ms(400);
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 016C                 Servo_motor(0);
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 016D             }
;PCODE: $000003E1 VOL: 0
; 0000 016E             delay_ms(300);
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 016F             mode = 1;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0170         }
; 0000 0171         else if (leftD > leftPastD - DELTA && leftD < leftPastD + DELTA && frontD > frontPastD - DELTA && frontD < front ...
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0172             nowStat = 'S';
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0173             DC_back();
;PCODE: $00000406 VOL: 0
; 0000 0174             Motor_slow();
;PCODE: $00000407 VOL: 0
; 0000 0175 
; 0000 0176             if (leftPastD > rightPastD) {
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 0177                 Servo_motor(30);
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 0178                 delay_ms(400);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 0179                 Servo_motor(-20);
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 017A             }
; 0000 017B             else {
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 017C                 Servo_motor(-30);
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 017D                 delay_ms(400);
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 017E                 Servo_motor(20);
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 017F             }
;PCODE: $0000041B VOL: 0
; 0000 0180             delay_ms(500);
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 0181         }
; 0000 0182         else if (mode) {
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 0183             DC_front(); Motor_fast();
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 0184             switch (L_R) {
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0185             case 0:
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 0186                 nowStat = 'R';
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 0187                 DC_front(); Motor_fast();
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 0188                 if (rightD > D_D) { Servo_motor(45); }
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 0189                 else if (rightD > D_C) { Servo_motor(35); }
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 018A                 else { Servo_motor(15); }
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 018B                 delay_ms(400);
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 018C                 break;
;PCODE: $00000443 VOL: 0
; 0000 018D             case 1:
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 018E                 nowStat = 'L';
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 018F                 DC_front(); Motor_fast();
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 0190                 if (leftD > D_D) { Servo_motor(-45); }
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 0191                 else if (leftD > D_C) { Servo_motor(-35); }
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 0192                 else { Servo_motor(-15); }
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0193                 delay_ms(400);
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 0194                 break;
;PCODE: $0000045F VOL: 0
; 0000 0195 
; 0000 0196             default:
;PCODE: $00000460 VOL: 0
; 0000 0197                 DC_front(); Motor_slow(); Servo_motor(0);
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 0198             }
;PCODE: $00000466 VOL: 0
; 0000 0199             mode = 0;
;PCODE: $00000467 VOL: 0
; 0000 019A             delay_ms(1000);
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 019B         }
; 0000 019C         else if (leftD >= D_B && rightD >= D_B) {
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 019D             nowStat = 'F';
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 019E             Servo_motor(0); delay_ms(100); DC_front(); Motor_fast();
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 019F         }
; 0000 01A0         else {
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 01A1             switch (L_R) {
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 01A2             case 0:
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 01A3                 nowStat = 'l';
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 01A4                 if (leftD < D_A) { mode = 1; DC_back(); Motor_fast(); Servo_motor(-45); delay_ms(400); Servo_motor(0); d ...
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 01A5                 else if (leftD < D_B) { DC_front(); Motor_fast(); Servo_motor(5 * (D_B - leftD)); }
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 01A6                 break;
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0000 01A7 
; 0000 01A8             case 1:
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 01A9                 nowStat = 'r';
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 01AA                 if (rightD < D_A) { mode = 1; DC_back(); Motor_fast(); Servo_motor(45); delay_ms(400); Servo_motor(0); d ...
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 01AB                 else if (rightD < D_B) { DC_front(); Motor_fast(); Servo_motor(-5 * (D_B - rightD)); }
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 01AC                 break;
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 01AD 
; 0000 01AE             default:
;PCODE: $000004CE VOL: 0
; 0000 01AF                 DC_front(); Motor_slow(); Servo_motor(0);
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 01B0             }
;PCODE: $000004D4 VOL: 0
; 0000 01B1 
; 0000 01B2             delay_ms(100);
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 01B3         }
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0000 01B4     }
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 01B5 }
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
