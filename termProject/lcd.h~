#include <mega128.h>
#include <stdio.h>
#include <delay.h>
#include "lcd.h"

#define D_A 6
#define D_B 11
#define D_C 30		// 신뢰할 수 있는 최대치
#define D_D 70
#define DELTA 1
#define MOTOR_FAST 235
#define MOTOR_SLOW 210

#define TURN_TIME 30000
#define MID_ANGLE 4000

#define ARR_SIZE 5
# define SWAP(x, y, temp) ( (temp)=(x), (x)=(y), (y)=(temp) )

unsigned long int TCsec;
unsigned long int TCstart;

unsigned char mode;
unsigned char nowStat;

/* 서보 */
void Init_Timer3A()
{
	TCCR3A = 0xAA; // FAST PWM
	TCCR3B = 0x1A; // 8분주=0.5usec

	OCR3AH = MID_ANGLE >> 8;          // 1500usec=0도
	OCR3AL = MID_ANGLE & 0xff;
	DDRE = 0x08;               // DDRE=0x08;   // PE 3 out  
	ICR3H = 39999 >> 8;
	ICR3L = 39999 & 0xff;        // 0.5usec*40000=20000usec=50Hz
}

void Servo_motor(int angle)
{
	OCR3AH = (angle * 14 + MID_ANGLE) >> 8;
	OCR3AL = (angle * 14 + MID_ANGLE) & 0xFF;
}

/* 초음파 센서 */
#define Trigger1     PORTB.0 //초음파 트리거 
#define Trigger2     PORTB.0
#define Trigger3     PORTB.0

#define Echo1        PIND.0 //초음파 에코
#define Echo2        PIND.1
#define Echo3        PIND.2

unsigned int leftArr[ARR_SIZE];         // 왼쪽
unsigned int rightArr[ARR_SIZE];        // 정면
unsigned int frontArr[ARR_SIZE];        // 오른쪽
unsigned int leftD;         // 왼쪽
unsigned int rightD;        // 정면
unsigned int frontD;        // 오른쪽 
unsigned int leftPastD;         // 왼쪽
unsigned int frontPastD;        // 정면
unsigned int rightPastD;        // 오른쪽

unsigned char L_R;

// unsigned int sonar_arr[3];

unsigned char rangeStr[5];
unsigned char TCsecStr[10];

void getEchoFront(unsigned char i) {
    while (!Echo1);//high가 될때
    TCNT1 = 0; TCCR1B = 2; //카운터시작 , 0.5분주
    while (Echo1);//low가 될때
    TCCR1B = 8; //카운터 정지 TCCR1B = 0도 가능
    rightArr[i] = TCNT1 / 116;//CM변경
    TCNT1 = 0;
}
void getEchoRight(unsigned char i)
{
    while (!Echo2);//high가 될때
    TCNT1 = 0; TCCR1B = 2; //카운터시작 , 0.5분주
    while (Echo2);//low가 될때
    TCCR1B = 8; //카운터 정지 TCCR1B = 0도 가능
    frontArr[i] = TCNT1 / 116;//CM변경  
    TCNT1 = 0;
}
void getEchoLeft(unsigned char i) {
    while (!Echo3);//high가 될때
    TCNT1 = 0; TCCR1B = 2; //카운터시작 , 0.5분주
    while (Echo3);//low가 될때
    TCCR1B = 8; //카운터 정지 TCCR1B = 0도 가능
    leftArr[i] = TCNT1 / 116;//CM변경      
    TCNT1 = 0;
}
/* 초음파 센서 */

/* 서보 */

void custom_port_init() {
    DDRE = 0xff;        // Servo, DC
    DDRB = 0xff;        // Sonar, DC    
    DDRD = 0x00;        // DC

    //DDRF = 0xFF;
}

/* DC MOTOR */
void TIMSK_setting() {
    TIMSK = (1 << OCIE0) | (1 << TOIE0);
}
void timer0_Init() {
    TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << CS01);
}
interrupt[TIM0_COMP] void timer0_compare() {
    PORTB.5 = 0;
    PORTB.6 = 0;
}
interrupt[TIM0_OVF] void timer0_overflow() {
    PORTB.5 = 1;
    PORTB.6 = 1;

    TCsec++;
}

void Motor_fast() {
    OCR0 = MOTOR_FAST;
}
void Motor_slow() {
    OCR0 = MOTOR_SLOW;
}
void DC_front() {
    PORTE.4 = 1;
    PORTE.5 = 0;
    PORTE.6 = 1;
    PORTE.7 = 0;
}
void DC_back() {
    PORTE.4 = 0;
    PORTE.5 = 1;
    PORTE.6 = 0;
    PORTE.7 = 1;
}

void DC_stop() {
    PORTB.5 = 0;
    PORTB.6 = 0;
    TIMSK = (0 << OCIE0) & (0 << TOIE0);
}

void DC_start() {
    TIMSK = (1 << OCIE0) | (1 << TOIE0);
    PORTB.5 = 1;
    PORTB.6 = 1;
}

void DC_Left() {
    PORTE.4 = 0;
    PORTE.5 = 1;
    PORTE.6 = 1;
    PORTE.7 = 0;
}

void DC_Right() {
    PORTE.4 = 1;
    PORTE.5 = 0;
    PORTE.6 = 0;
    PORTE.7 = 1;
}

/* DC MOTOR */

int partition(unsigned int list[], int left, int right) {
    int pivot, temp;
    int low, high;

    low = left;
    high = right + 1;
    pivot = list[left];

    do {
        do {
            low++;
        } while (low <= right && list[low] < pivot);

        do {
            high--;
        } while (high >= left && list[high] > pivot);

        if (low < high) {
            SWAP(list[low], list[high], temp);
        }
    } while (low < high);

    SWAP(list[left], list[high], temp);

    return high;
}

void quick_sort(unsigned int list[], int left, int right) {
    if (left < right) {
        int q = partition(list, left, right);

        quick_sort(list, left, q - 1);
        quick_sort(list, q + 1, right);
    }
}

unsigned int get_median_L(unsigned char num) {
    quick_sort(leftArr, 0, ARR_SIZE - 1);
    return leftArr[num];
}

unsigned int get_median_F(unsigned char num) {
    quick_sort(frontArr, 0, ARR_SIZE - 1);
    return frontArr[num];
}

unsigned int get_median_R(unsigned char num) {
    quick_sort(rightArr, 0, ARR_SIZE - 1);
    return rightArr[num];
}

void get_sonar() {
    unsigned char i = 0;
    for (i = 0; i < ARR_SIZE; i++) {
        Trigger3 = 1; delay_us(10); Trigger3 = 0; getEchoRight(i); delay_ms(10);
        Trigger2 = 1; delay_us(10); Trigger2 = 0; getEchoFront(i); delay_ms(10);
        Trigger1 = 1; delay_us(10); Trigger1 = 0; getEchoLeft(i); delay_ms(10);
    }

    leftD = get_median_L(2);
    frontD = get_median_F(2);
    rightD = get_median_R(1);

    LCD_pos(0, 1);
    sprintf(rangeStr, "%03d", rightD);
    LCD_STR(rangeStr);

    LCD_pos(0, 5);
    sprintf(rangeStr, "%03d", frontD);
    LCD_STR(rangeStr);

    LCD_pos(0, 9);
    sprintf(rangeStr, "%03d", leftD);
    LCD_STR(rangeStr);

    LCD_pos(0, 14);
    switch (mode)
    {
    case 0:
        LCD_CHAR('A');
        break;
    case 1:
        LCD_CHAR('B');
        break;
    case 2:
        LCD_CHAR('C');
        break;
    case 3:
        LCD_CHAR('D');
        break;
    case 4:
        LCD_CHAR('E');
        break;
    default:
        LCD_CHAR('Z');
        break;
    }
    LCD_pos(0, 15);
    LCD_CHAR(nowStat);

    LCD_pos(1, 0);
    sprintf(TCsecStr, "%4x%4x", TCsec >> 16, TCsec);
    LCD_STR(TCsecStr);
}

void main() {
    SREG |= 0x80;
    custom_port_init();
    Init_Timer3A();
    Port_Init();
    LCD_Init();
    TIMSK_setting();
    timer0_Init();

    TCCR1A = 0;
    TCCR1B = 8;
    Motor_fast();

    leftD = 0;
    frontD = 0;
    rightD = 0;
    leftPastD = 0;
    frontPastD = 0;
    rightPastD = 0;

    TCsec = 0;
    TCstart = 0;

    PORTE.3 = 0;

    /* DC Default */
    PORTB.5 = 1;
    PORTB.6 = 1;

    OCR0 = MOTOR_FAST;

    DC_front();
    /* DC Default */

    L_R = 2;    //작은 값 L(0), R(1)
    mode = 0;
    nowStat = 0;

    while (1) {
        L_R = 0;
        leftPastD = leftD;
        frontPastD = frontD;
        rightPastD = rightD;

        get_sonar();
        if (leftD > rightD) L_R = 1;

        if (!mode) TCstart = 0;
        else if (TCstart == 0) TCstart = TCsec;

        if (TCsec > 749050) mode = 2;

        if (mode == 2) {
            DC_stop();
            LCD_Clear();
            sprintf(TCsecStr, "End Drive");
            LCD_STR(TCsecStr);
            delay_ms(50000);
        }
        else if (frontD < D_A && frontPastD < D_B) {
            nowStat = 'B';
            DC_back();
            Motor_slow();

            if (leftPastD > rightPastD) {
                Servo_motor(20);
                delay_ms(400);
                Servo_motor(0);
            }
            else {
                Servo_motor(-20);
                delay_ms(400);
                Servo_motor(0);
            }
            delay_ms(300);
            mode = 1;
        }
        else if (leftD > leftPastD - DELTA && leftD < leftPastD + DELTA && frontD > frontPastD - DELTA && frontD < frontPastD + DELTA && rightD > rightPastD - DELTA && rightD < rightPastD + DELTA) {
            nowStat = 'S';
            DC_back();
            Motor_slow();

            if (leftPastD > rightPastD) {
                Servo_motor(30);
                delay_ms(400);
                Servo_motor(-20);
            }
            else {
                Servo_motor(-30);
                delay_ms(400);
                Servo_motor(20);
            }
            delay_ms(500);
        }
        else if (mode) {
            DC_front(); Motor_fast();
            switch (L_R) {
            case 0:
                nowStat = 'R';
                DC_front(); Motor_fast();
                if (rightD > D_D) { Servo_motor(45); }
                else if (rightD > D_C) { Servo_motor(35); }
                else { Servo_motor(15); }
                delay_ms(400);
                break;
            case 1:
                nowStat = 'L';
                DC_front(); Motor_fast();
                if (leftD > D_D) { Servo_motor(-45); }
                else if (leftD > D_C) { Servo_motor(-35); }
                else { Servo_motor(-15); }
                delay_ms(400);
                break;

            default:
                DC_front(); Motor_slow(); Servo_motor(0);
            }
            mode = 0;
            delay_ms(1000);
        }
        else if (leftD >= D_B && rightD >= D_B) {
            nowStat = 'F';
            Servo_motor(0); delay_ms(100); DC_front(); Motor_fast();
        }
        else {
            switch (L_R) {
            case 0:
                nowStat = 'l';
                if (leftD < D_A) { mode = 1; DC_back(); Motor_fast(); Servo_motor(-45); delay_ms(400); Servo_motor(0); delay_ms(300); }
                else if (leftD < D_B) { DC_front(); Motor_fast(); Servo_motor(5 * (D_B - leftD)); }
                break;

            case 1:
                nowStat = 'r';
                if (rightD < D_A) { mode = 1; DC_back(); Motor_fast(); Servo_motor(45); delay_ms(400); Servo_motor(0); delay_ms(300); }
                else if (rightD < D_B) { DC_front(); Motor_fast(); Servo_motor(-5 * (D_B - rightD)); }
                break;

            default:
                DC_front(); Motor_slow(); Servo_motor(0);
            }

            delay_ms(100);
        }
    }
}
